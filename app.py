import os
import io
import csv
import time
import re
import unicodedata
from typing import Dict, List, Optional, Set, Tuple
from collections import Counter, defaultdict

import json
import zipfile
from datetime import datetime


import streamlit as st
from notion_client import Client
from notion_client.errors import APIResponseError

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Secrets ‚Üí env bridge (Streamlit Cloud eset√©n hasznos)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
try:
    for k in ("NOTION_API_KEY", "NOTION_DATABASE_ID", "APP_PASSWORD", "NOTION_PROPERTY_NAME"):
        if k in st.secrets and not os.getenv(k):
            os.environ[k] = str(st.secrets[k])
except Exception:
    pass

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# CONFIG
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
NOTION_API_KEY = os.getenv("NOTION_API_KEY", "").strip()
DATABASE_ID    = os.getenv("NOTION_DATABASE_ID", "").strip()
APP_PASSWORD   = os.getenv("APP_PASSWORD", "").strip()

# A csoportos√≠t√°shoz haszn√°lt property a Notion adatb√°zisban:
PROPERTY_NAME  = os.getenv("NOTION_PROPERTY_NAME", "Kurzus").strip()

# Megjelen√≠t√©si √°tnevez√©sek: {VAL√ìDI_N√âV -> MIT MUTASSON A LIST√ÅBAN}
DISPLAY_RENAMES: Dict[str, str] = {
    "√úzleti Modellek": "Milyen v√°llalkoz√°st ind√≠ts",
    "Marketing rendszerek": "√úgyf√©lszerz≈ë marketing rendszerek",
}

# CSV oszlopok ‚Äì egys√©ges snake_case
CSV_FIELDNAMES = ["oldal_cime", "szakasz", "sorszam", "tartalom"]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Oldalbe√°ll√≠t√°s
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.set_page_config(page_title="Notion export ‚Äì Kurzus", page_icon="üì¶", layout="centered")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Autentik√°ci√≥
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def need_auth() -> bool:
    if "authed" not in st.session_state:
        st.session_state.authed = False
    return not st.session_state.authed

def login_form() -> None:
    st.subheader("Bel√©p√©s")
    with st.form("login", clear_on_submit=False):
        pwd = st.text_input("Jelsz√≥", type="password")
        ok = st.form_submit_button("Bel√©p√©s")
        if ok:
            if APP_PASSWORD and pwd == APP_PASSWORD:
                st.session_state.authed = True
                st.success("Bel√©pt√©l ‚úÖ")
                st.rerun()
            else:
                st.error("Hib√°s jelsz√≥.")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Notion kliens √©s s√©mainform√°ci√≥
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@st.cache_resource
def get_client() -> Client:
    if not NOTION_API_KEY:
        raise RuntimeError("A NOTION_API_KEY nincs be√°ll√≠tva (k√∂rnyezeti v√°ltoz√≥ vagy Streamlit Secrets).")
    return Client(auth=NOTION_API_KEY)

@st.cache_data(ttl=120)
def get_database_schema() -> Dict:
    if not DATABASE_ID:
        raise RuntimeError("A NOTION_DATABASE_ID nincs be√°ll√≠tva.")
    return get_client().databases.retrieve(database_id=DATABASE_ID)

@st.cache_data(ttl=120)
def get_property_type() -> Optional[str]:
    """A csoportos√≠t√≥ property (PROPERTY_NAME) t√≠pusa: select / multi_select / status."""
    db = get_database_schema()
    p = (db.get("properties", {}) or {}).get(PROPERTY_NAME)
    return p.get("type") if p else None

@st.cache_data(ttl=120)
def schema_id_to_current_name() -> Dict[str, str]:
    """A PROPERTY_NAME opci√≥k (id ‚Üí jelenlegi n√©v) t√°bl√°ja."""
    db = get_database_schema()
    props = db.get("properties", {}) or {}
    p = props.get(PROPERTY_NAME)
    id2name: Dict[str, str] = {}
    if p:
        ptype = p.get("type")
        if ptype in ("select", "multi_select", "status"):
            for opt in (p.get(ptype, {}) or {}).get("options", []) or []:
                if opt.get("id") and opt.get("name"):
                    id2name[opt["id"]] = opt["name"]
    return id2name

def with_backoff(fn, *args, retries: int = 5, **kwargs):
    """Egyszer≈± backoff r√©teg 429/5xx hib√°kra."""
    for i in range(retries):
        try:
            return fn(*args, **kwargs)
        except APIResponseError as e:
            status = getattr(e, "status", None)
            if status in (429, 500, 502, 503):
                time.sleep((2 ** i) + 0.1)
                continue
            raise

def query_all_pages() -> List[Dict]:
    """Az adatb√°zis minden oldal√°t lek√©ri lapoz√°ssal (√°ltal√°nos ‚Äì NINCS sz≈±r√©s/rendez√©s)."""
    client = get_client()
    results: List[Dict] = []
    cursor = None
    while True:
        resp = with_backoff(client.databases.query, database_id=DATABASE_ID, start_cursor=cursor, page_size=100)
        results.extend(resp.get("results", []) or [])
        if not resp.get("has_more"):
            break
        cursor = resp.get("next_cursor")
    return results

def query_filtered_pages(filter_: Dict, sorts: Optional[List[Dict]] = None) -> List[Dict]:
    """Sz≈±rt lek√©rdez√©s lapoz√°ssal, opcion√°lis rendez√©ssel (sorts)."""
    client = get_client()
    results: List[Dict] = []
    cursor = None
    while True:
        kwargs = {
            "database_id": DATABASE_ID,
            "filter": filter_,
            "start_cursor": cursor,
            "page_size": 100
        }
        if sorts:
            kwargs["sorts"] = sorts
        resp = with_backoff(client.databases.query, **kwargs)
        results.extend(resp.get("results", []) or [])
        if not resp.get("has_more"):
            break
        cursor = resp.get("next_cursor")
    return results


@st.cache_data(ttl=120)
def collect_used_ids_and_names() -> Tuple[Counter, Dict[str, Set[str]]]:
    """
    A PROPERTY_NAME property-hez:
      - megsz√°moljuk az opci√≥kat (id szerint),
      - √©s √∂sszegy≈±jtj√ºk, hogy az oldalakban milyen 'n√©v' v√°ltozatok fordultak el≈ë.
    """
    pages = query_all_pages()
    ptype = get_property_type()
    used_by_id: Counter = Counter()
    names_seen_by_id: Dict[str, Set[str]] = defaultdict(set)

    for page in pages:
        prop = (page.get("properties", {}) or {}).get(PROPERTY_NAME)
        if not prop:
            continue
        if ptype == "select":
            node = prop.get("select") or {}
            oid, name = node.get("id"), (node.get("name") or "").strip()
            if oid:
                used_by_id[oid] += 1
                if name:
                    names_seen_by_id[oid].add(name)
        elif ptype == "multi_select":
            for node in prop.get("multi_select") or []:
                oid, name = node.get("id"), (node.get("name") or "").strip()
                if oid:
                    used_by_id[oid] += 1
                    if name:
                        names_seen_by_id[oid].add(name)
        elif ptype == "status":
            node = prop.get("status") or {}
            oid, name = node.get("id"), (node.get("name") or "").strip()
            if oid:
                used_by_id[oid] += 1
                if name:
                    names_seen_by_id[oid].add(name)

    return used_by_id, names_seen_by_id


def build_display_list() -> List[Tuple[str, int, Set[str]]]:
    """
    Visszaadja a megjelen√≠t√©si list√°t:
      [(display_name, count, canonical_names), ...]
      - display_name: amit a list√°ban mutatunk (DISPLAY_RENAMES alkalmazva)
      - canonical_names: ezzel pr√≥b√°lunk sz≈±rni (aktu√°lis n√©v + esetleges r√©gi vari√°nsok + reverse aliasok)
    """
    used_by_id, names_seen = collect_used_ids_and_names()
    id2current = schema_id_to_current_name()

    # reverse alias t√°bla: {megjelen√≠tett_n√©v ‚Üí {r√©gi_nevek}}
    reverse_alias: Dict[str, Set[str]] = defaultdict(set)
    for old, new in DISPLAY_RENAMES.items():
        reverse_alias[new].add(old)

    display_items: Dict[str, Dict[str, object]] = {}
    for oid, cnt in used_by_id.items():
        # jelenlegi s√©man√©v vagy oldalakon l√°tott egyik n√©v (√°rva fallback)
        current_candidates = names_seen.get(oid, set())
        current_name = id2current.get(oid) or (sorted(current_candidates)[0] if current_candidates else f"(√°rva {oid[:6]}...)")
        display_name = DISPLAY_RENAMES.get(current_name, current_name)

        canon: Set[str] = set([current_name]) | current_candidates | reverse_alias.get(display_name, set())

        entry = display_items.setdefault(display_name, {"count": 0, "canon": set()})
        entry["count"] = int(entry["count"]) + cnt  # type: ignore
        entry["canon"] = set(entry["canon"]) | canon  # type: ignore

    items: List[Tuple[str, int, Set[str]]] = [
        (disp, int(meta["count"]), set(meta["canon"]))  # type: ignore
        for disp, meta in display_items.items()
    ]
    items.sort(key=lambda x: (-x[1], x[0].lower()))
    return items


def build_filter(ptype: Optional[str], name: str) -> Dict:
    if ptype == "select":
        return {"property": PROPERTY_NAME, "select": {"equals": name}}
    if ptype == "multi_select":
        return {"property": PROPERTY_NAME, "multi_select": {"contains": name}}
    if ptype == "status":
        return {"property": PROPERTY_NAME, "status": {"equals": name}}
    return {"property": PROPERTY_NAME, "select": {"equals": name}}


def extract_title(page: Dict) -> str:
    """Az oldal c√≠m√©nek kinyer√©se."""
    props = page.get("properties", {}) or {}
    for _, val in props.items():
        if val.get("type") == "title":
            arr = val.get("title", []) or []
            if arr:
                return " ".join(x.get("plain_text", "") for x in arr).strip() or "N√©vtelen oldal"
    # fallback: ha a DB-ben konkr√©tan "Lecke c√≠me" a title mez≈ë neve
    lekce = props.get("Lecke c√≠me", {})
    if lekce.get("type") == "title" and lekce.get("title"):
        return " ".join((x.get("plain_text") or "") for x in lekce["title"]).strip() or "N√©vtelen oldal"
    return "N√©vtelen oldal"

def resolve_title_prop_name() -> str:
    """A DB-ben l√©v≈ë c√≠m (title) t√≠pus√∫ property NEVE (az API a property-n√©vvel v√°rja a sortot)."""
    db = get_database_schema()
    for pname, meta in (db.get("properties", {}) or {}).items():
        if meta.get("type") == "title":
            return pname
    return ""  # extr√©m esetben √ºres (nem re√°lis egy DB-n√©l)

def format_rich_text(rt_list: List[Dict]) -> str:
    out = ""
    for r in rt_list or []:
        t = r.get("plain_text", "") or ""
        href = r.get("href")
        out += f"[{t}]({href})" if href else t
    return out


def blocks_to_md(block_id: str, depth: int = 0) -> str:
    """
    Az oldal/blokk gyerekeit markdownn√° alak√≠tja rekurz√≠van.

    FIGYELEM: a Notion API "numbered_list_item" blokkokat ad vissza, √©s a hagyom√°nyos markdownban
    gyakori, hogy minden elem "1."-k√©nt ker√ºl ki√≠rva. Mi itt sz√°nd√©kosan MINDIG "1."-et √≠runk ki,
    majd a teljes sz√∂veg √∂ssze√°ll√≠t√°sa UT√ÅN, egy k√ºl√∂n l√©p√©sben √∫jrasz√°mozzuk a list√°kat
    (fix_numbered_lists), √≠gy a be√°gyazott tartalom √©s a lapoz√°s sem zavarja √∂ssze a sz√°ml√°l√≥t.
    """
    client = get_client()
    lines: List[str] = []
    cursor = None
    indent = "  " * depth

    while True:
        resp = with_backoff(client.blocks.children.list, block_id=block_id, start_cursor=cursor)
        for block in resp.get("results", []) or []:
            btype = block.get("type")
            data = block.get(btype, {}) or {}
            line = ""

            if btype in (
                "paragraph", "heading_1", "heading_2", "heading_3",
                "bulleted_list_item", "numbered_list_item",
                "quote", "to_do", "callout", "toggle"
            ):
                txt = format_rich_text(data.get("rich_text", []))
                prefix = ""
                if   btype == "heading_1":          prefix = "# "
                elif btype == "heading_2":          prefix = "## "
                elif btype == "heading_3":          prefix = "### "
                elif btype == "bulleted_list_item": prefix = "- "
                elif btype == "numbered_list_item": prefix = "1. "  # ‚Üê mindig 1., k√©s≈ëbb renumber
                elif btype == "quote":              prefix = "> "
                elif btype == "to_do":              prefix = "- [x] " if data.get("checked") else "- [ ] "
                elif btype == "callout":            prefix = "üí° "
                elif btype == "toggle":             prefix = "‚ñ∂ "
                if txt or prefix:
                    line = f"{indent}{prefix}{txt}"

            elif btype == "code":
                lang = data.get("language", "") or ""
                inner = format_rich_text(data.get("rich_text", []))
                line = f"{indent}```{lang}\n{inner}\n```"

            elif btype == "equation":
                expr = data.get("expression", "") or ""
                line = f"{indent}$$ {expr} $$"

            elif btype == "divider":
                line = f"{indent}---"

            elif btype in ("image", "video", "file", "pdf"):
                cap = format_rich_text(data.get("caption", []))
                line = f"{indent}*[{btype.upper()}]* {cap}".rstrip()

            if line:
                lines.append(line)

            if block.get("has_children"):
                child = blocks_to_md(block["id"], depth + 1)
                if child.strip():
                    lines.append(child)

        if not resp.get("has_more"):
            break
        cursor = resp.get("next_cursor")

    return "\n".join(lines)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Property felder√≠t√©s ‚ÄûSzakasz‚Äù / ‚ÄûSorsz√°m‚Äù r√©sz√©re
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _norm_key(s: str) -> str:
    # √©kezetek elt√°vol√≠t√°sa, lower, sz√≥k√∂z/als√≥von√°s/d√≠sz jelek t√∂rl√©se
    if not isinstance(s, str):
        s = str(s or "")
    s = unicodedata.normalize("NFD", s)
    s = "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
    s = s.lower()
    for ch in (" ", "_", "-", ".", ":"):
        s = s.replace(ch, "")
    return s

SECTION_TARGETS = [
    "szakasz", "szekcio", "section", "modul", "fejezet", "r√©sz", "resz"
]
ORDER_TARGETS = [
    "sorsz√°m", "sorszam", "sorrend", "order", "index", "pozicio", "poz√≠ci√≥", "rank"
]

@st.cache_data(ttl=300)
def resolve_section_and_order_props() -> Tuple[str, str]:
    """
    Visszaadja a Notion property kulcsnev√©t (pontosan), amit 'Szakasz' √©s 'Sorsz√°m' alatt √©rts√ºnk.
    - N√©v szerinti (√©kezet/kis-nagybet≈±/stb.) keres√©s szinonim√°kkal.
    - V√©g√ºl best-effort: 'select/multi_select/status' ‚Üí szakasz; 'number' ‚Üí sorsz√°m.
    """
    db = get_database_schema()
    props: Dict[str, Dict] = db.get("properties", {}) or {}

    # Szakasz
    lookup = { _norm_key(k): k for k in props.keys() }
    sec_key = ""
    for cand in SECTION_TARGETS + ["szakasz"]:
        key = lookup.get(_norm_key(cand))
        if key:
            sec_key = key
            break
    if not sec_key:
        # t√≠pus szerinti tipp: kategoriz√°l√≥ property
        for k, v in props.items():
            if v.get("type") in ("select", "multi_select", "status"):
                sec_key = k
                break

    # Sorsz√°m
    ord_key = ""
    for cand in ORDER_TARGETS + ["sorsz√°m", "sorszam"]:
        key = lookup.get(_norm_key(cand))
        if key:
            ord_key = key
            break
    if not ord_key:
        # t√≠pus szerinti tipp: number property
        for k, v in props.items():
            if v.get("type") == "number":
                ord_key = k
                break

    return (sec_key or ""), (ord_key or "")


def format_property_for_csv(page: Dict, prop_name: str) -> str:
    """
    √Åltal√°nos property-kivonat CSV-hez.
    Lefedi: number, select, multi_select, status, rich_text, date, url, email, people, title.
    """
    if not prop_name:
        return ""
    props = page.get("properties", {}) or {}
    p = props.get(prop_name)
    if not p:
        return ""

    ptype = p.get("type")
    try:
        if ptype == "number":
            val = p.get("number", None)
            return "" if val is None else str(val)

        if ptype == "select":
            node = p.get("select") or {}
            return (node.get("name") or "").strip()

        if ptype == "multi_select":
            arr = p.get("multi_select") or []
            return ", ".join((x.get("name") or "").strip() for x in arr if x.get("name"))

        if ptype == "status":
            node = p.get("status") or {}
            return (node.get("name") or "").strip()

        if ptype == "rich_text":
            arr = p.get("rich_text") or []
            return " ".join((x.get("plain_text") or "") for x in arr).strip()

        if ptype == "title":
            arr = p.get("title") or []
            return " ".join((x.get("plain_text") or "") for x in arr).strip()

        if ptype == "date":
            node = p.get("date") or {}
            start = node.get("start") or ""
            end   = node.get("end") or ""
            return f"{start}..{end}" if end else start

        if ptype == "url":
            return p.get("url") or ""

        if ptype == "email":
            return p.get("email") or ""

        if ptype == "people":
            arr = p.get("people") or []
            names = []
            for person in arr:
                name = (person.get("name") or "").strip()
                if not name:
                    name = (person.get("person", {}) or {}).get("email", "") or ""
                if name:
                    names.append(name)
            return ", ".join(names)

        return ""
    except Exception:
        return ""


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Rendez√©s kiv√°laszt√°sa: 1) Sorsz√°m property ‚Üë  2) ABC c√≠m szerint ‚Üë
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def resolve_sorts(order_prop: Optional[str]) -> Tuple[List[Dict], str]:
    """
    Visszaadja a Notion API "sorts" list√°t √©s egy emberi le√≠r√°st.
    K√∂vetelm√©ny:
      1) Ha van 'Sorsz√°m' property ‚Üí aszerint n√∂vekv≈ë
      2) Ha nincs ‚Üí c√≠m (title property) szerint ABC (n√∂vekv≈ë)
    """
    if order_prop:
        return [{"property": order_prop, "direction": "ascending"}], f"property: {order_prop} ‚Üë"

    title_prop = resolve_title_prop_name()
    if title_prop:
        return [{"property": title_prop, "direction": "ascending"}], f"title: {title_prop} ‚Üë"

    # legv√©gs≈ë fallback ‚Äì nem val√≥sz√≠n≈±, hogy kell
    return [], "unspecified (API default)"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Markdown sz≈±r√©s + sz√°mozott list√°k √öJRASZ√ÅMOZ√ÅSA
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _normalize(s: str) -> str:
    s = unicodedata.normalize("NFD", s or "")
    s = "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
    return s.strip().lower()

def _split_h2_sections(md: str) -> Dict[str, List[str]]:
    """
    H2 (##) c√≠mek ment√©n darabol, a kulcs a H2 c√≠msor sz√∂vege (heading n√©lk√ºl).
    A tartalom NEM tartalmazza a H2 sort, csak az ut√°na j√∂v≈ë sorokat a k√∂vetkez≈ë H2-ig.
    """
    sections: Dict[str, List[str]] = {}
    current: Optional[str] = None
    for line in (md or "").splitlines():
        m = re.match(r"^\s*##\s+(.*)\s*$", line)
        if m:
            title = m.group(1).strip()
            current = title
            sections.setdefault(title, [])
            continue
        if current is not None:
            sections[current].append(line)
    return sections

def _join(lines: List[str]) -> str:
    return "\n".join(lines).strip()

def fix_numbered_lists(md: str) -> str:
    """
    √öJRASZ√ÅMOZ√ÅS:
      - csak azokat a sorokat m√≥dos√≠tja, amelyek *sz√≥k√∂z√∂k ut√°n* k√∂zvetlen√ºl ‚Äûsz√°m + . + sz√≥k√∂z‚Äù mint√°val kezd≈ëdnek.
      - figyeli a k√≥dblokkokat (```), azokat √©rintetlen√ºl hagyja.
      - kezeli a be√°gyazott tartalmat: a list√°hoz tartoz√≥, de jobban beh√∫zott sorok (pl. a listapont alatti bekezd√©s)
        nem szak√≠tj√°k meg a sz√°moz√°st.
    """
    lines = (md or "").splitlines()
    out: List[str] = []
    in_code = False
    fence_re = re.compile(r'^\s*```')
    num_re = re.compile(r'^(\s*)(\d+)\.\s(.*)$')

    active_list_indent: Optional[int] = None  # h√°ny space a numerikus pontokn√°l
    counter_for_indent: Dict[int, int] = {}

    for line in lines:
        # k√≥dblokk nyit/z√°r
        if fence_re.match(line):
            in_code = not in_code
            out.append(line)
            # k√≥dblokk sorai ne befoly√°solj√°k a listasz√°ml√°l√≥t
            continue

        if in_code:
            out.append(line)
            continue

        m = num_re.match(line)
        if m:
            indent_str = m.group(1)
            indent_len = len(indent_str)
            content = m.group(3)

            # √∫j lista vagy √∫j szint?
            if active_list_indent is None or indent_len != active_list_indent:
                # √∫j lista ezen az indenten
                active_list_indent = indent_len
                # t√∂r√∂lj√ºk a m√©lyebb sz√°ml√°l√≥kat
                for k in list(counter_for_indent.keys()):
                    if k >= indent_len:
                        del counter_for_indent[k]
                counter_for_indent[indent_len] = 1
            else:
                # folytat√≥lagos elem ugyanazon az indenten
                counter_for_indent[indent_len] = counter_for_indent.get(indent_len, 0) + 1

            n = counter_for_indent[indent_len]
            out.append(f"{indent_str}{n}. {content}")
        else:
            # nem sz√°mozott sor: eld√∂ntj√ºk, hogy a list√°n bel√ºli tartalom-e
            if active_list_indent is not None:
                leading_spaces = len(line) - len(line.lstrip(" "))
                if line.strip() == "":
                    # √ºres sor: list√°t nem szak√≠tjuk meg
                    out.append(line)
                    continue
                if leading_spaces > active_list_indent:
                    # a jelenlegi listapont alatti ‚Äûtartalom‚Äù ‚Üí marad a lista akt√≠v
                    out.append(line)
                    continue
                # ide √©rve vagy kisebb/egyenl≈ë indent, vagy nincs indent ‚Üí v√©ge a list√°nak
                active_list_indent = None
                counter_for_indent.clear()

            out.append(line)

    return "\n".join(out)

def select_video_or_lesson(md: str) -> str:
    """
    Logika:
      - Ha a ‚ÄûVide√≥ sz√∂veg‚Äù r√©sz tartalma NEM √ºres ‚Üí csak azt adja vissza (√∫jrasz√°mozva).
      - Egy√©bk√©nt, ha a ‚ÄûLecke sz√∂veg‚Äù NEM √ºres ‚Üí csak azt adja vissza (√∫jrasz√°mozva).
      - K√ºl√∂nben √ºres string.
    """
    sections = _split_h2_sections(md)
    norm_map = { _normalize(k): k for k in sections.keys() }

    video_key  = norm_map.get(_normalize("Vide√≥ sz√∂veg"))
    lesson_key = norm_map.get(_normalize("Lecke sz√∂veg"))

    video_txt  = _join(sections.get(video_key, [])) if video_key else ""
    lesson_txt = _join(sections.get(lesson_key, [])) if lesson_key else ""

    if re.search(r"\S", video_txt or ""):
        return fix_numbered_lists(video_txt)
    if re.search(r"\S", lesson_txt or ""):
        return fix_numbered_lists(lesson_txt)
    return ""


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Export
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def export_one(display_name: str, canonical_names: Set[str]) -> bytes:
    """
    Egy megjelen√≠t√©si csoport (display_name) exportja CSV-be.
    Rendez√©s:
      - ha van dedik√°lt 'Sorsz√°m' property ‚Üí annak √©rt√©ke szerint n√∂vekv≈ë
      - k√ºl√∂nben: c√≠m (title) szerint ABC
    A CSV 'tartalom' mez≈ë:
      - csak a ‚ÄûVide√≥ sz√∂veg‚Äù H2 alatti r√©sz, HA az nem √ºres;
      - k√ºl√∂nben a ‚ÄûLecke sz√∂veg‚Äù H2 alatti r√©sz (ha nem √ºres);
      - k√ºl√∂nben √ºres.
      - a sz√°mozott list√°kat mindig 1., 2., 3. ‚Ä¶ form√°ra √∫jrasz√°mozzuk (fix_numbered_lists).
    A CSV 'sorszam' mez≈ë:
      - ha van 'Sorsz√°m' property ‚Üí annak √©rt√©ke,
      - k√ºl√∂nben √ºres (nincs explicit sorsz√°m a DB-ben).
    """
    ptype = get_property_type()
    section_prop, order_prop = resolve_section_and_order_props()
    sorts, _sort_desc = resolve_sorts(order_prop)

    # pr√≥b√°ljunk v√©gig t√∂bb n√©ven, els≈ë tal√°lat nyer
    pages: List[Dict] = []
    for nm in sorted(canonical_names, key=lambda s: (0 if s == display_name else 1, s)):
        try:
            subset = query_filtered_pages(filter_=build_filter(ptype, nm), sorts=sorts)
        except APIResponseError:
            subset = []
        if subset:
            pages = subset
            break

    # CSV √∂ssze√°ll√≠t√°sa mem√≥ri√°ban
    buf = io.StringIO()
    writer = csv.DictWriter(buf, fieldnames=CSV_FIELDNAMES)
    writer.writeheader()

    for page in pages:
        pid   = page.get("id")
        title = extract_title(page)
        try:
            raw_md = blocks_to_md(pid).strip()
            content = select_video_or_lesson(raw_md)  # felt√©teles kiv√°g√°s + √∫jrasz√°moz√°s
        except Exception as e:
            content = f"[HIBA: {e}]"

        sorszam_value = format_property_for_csv(page, order_prop) if order_prop else ""

        row = {
            "oldal_cime": title,
            "szakasz": format_property_for_csv(page, section_prop),
            "sorszam": sorszam_value,
            "tartalom": content,
        }
        writer.writerow(row)
        time.sleep(0.01)  # udvarias temp√≥

    return buf.getvalue().encode("utf-8")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# UI
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.title("üì¶ Notion export ‚Äì Kurzus")
st.caption("Rendez√©s: Sorsz√°m ‚Üë, k√ºl√∂nben ABC c√≠m ‚Üë. A ‚Äûtartalom‚Äù a Vide√≥ sz√∂veg (ha √ºres: Lecke sz√∂veg) ‚Äì a sz√°mozott list√°k automatikusan 1., 2., 3.‚Ä¶ form√°ra √∫jrasz√°mozva.")

# Jelsz√≥
if need_auth():
    if not APP_PASSWORD:
        st.warning("Admin: √°ll√≠tsd be az APP_PASSWORD v√°ltoz√≥t / Secrets-et a jelsz√≥hoz.")
    login_form()
    st.stop()

# F≈ë fel√ºlet
try:
    items = build_display_list()  # [(display_name, count, canon_set)]
except Exception as e:
    st.error(f"Hiba a Notion lek√©r√©sn√©l: {e}")
    st.stop()

if not items:
    st.info("Nem tal√°ltam ‚ÄûKurzus‚Äù √©rt√©keket.")
    st.stop()

# V√°laszt√≥
labels = [f"{name} ({count})" for name, count, _ in items]
name_by_label = {labels[i]: items[i][0] for i in range(len(items))}
canon_by_name = {items[i][0]: items[i][2] for i in range(len(items))}

# T√°j√©koztat√°s: mely property-t/sortot haszn√°lunk
sec_prop, ord_prop = resolve_section_and_order_props()
sorts, sorts_desc = resolve_sorts(ord_prop)
with st.expander("R√©szletek (felismert mez≈ëk √©s rendez√©s)"):
    st.write(f"**Szakasz mez≈ë**: `{sec_prop or '‚Äî (nem tal√°ltam; √ºres lesz a CSV-ben)'}`")
    st.write(f"**Sorsz√°m mez≈ë**: `{ord_prop or '‚Äî (nincs; ABC c√≠m szerint rendez√ºnk)'}`")
    st.write(f"**Rendez√©s**: {sorts_desc}")

pick = st.multiselect("V√°laszd ki, mit export√°ljunk:", labels, max_selections=None)

if st.button("Export√°l√°s (CSV)"):
    if not pick:
        st.warning("V√°lassz legal√°bb egy elemet.")
    else:
        for lbl in pick:
            name = name_by_label[lbl]
            data = export_one(name, canon_by_name[name])
            fname_safe = re.sub(r"[^\w\-. ]", "_", name).strip().replace(" ", "_")
            st.download_button(
                label=f"Let√∂lt√©s: {name}.csv",
                data=data,
                file_name=f"export_Kurzus_{fname_safe}.csv",
                mime="text/csv",
                key=f"dl-{fname_safe}",
            )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# T√∂meges export seg√©df√ºggv√©nyek: checkpoint + ZIP + progress
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CHECKPOINT_FILE = ".export_checkpoint.json"
EXPORTS_ROOT = "exports"

def _slug(s: str) -> str:
    s = s.strip().lower()
    s = re.sub(r"[^\w\s-]", "", s, flags=re.UNICODE)
    s = re.sub(r"[\s-]+", "_", s)
    return s[:80] if len(s) > 80 else s

def _ensure_dir(p: str):
    os.makedirs(p, exist_ok=True)

def _save_checkpoint(state: dict):
    try:
        with open(CHECKPOINT_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

def _load_checkpoint() -> Optional[dict]:
    if not os.path.exists(CHECKPOINT_FILE):
        return None
    try:
        with open(CHECKPOINT_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return None

def _clear_checkpoint():
    try:
        if os.path.exists(CHECKPOINT_FILE):
            os.remove(CHECKPOINT_FILE)
    except Exception:
        pass

def _write_csv_file(folder: str, display_name: str, data: bytes) -> str:
    fn = f"export_{_slug(display_name)}.csv"
    fp = os.path.join(folder, fn)
    with open(fp, "wb") as f:
        f.write(data)
    return fp

def _zip_folder(folder: str) -> bytes:
    buf = io.BytesIO()
    with zipfile.ZipFile(buf, "w", compression=zipfile.ZIP_DEFLATED) as zf:
        for root, _, files in os.walk(folder):
            for name in sorted(files):
                fp = os.path.join(root, name)
                arcname = os.path.relpath(fp, folder)
                zf.write(fp, arcname)
    buf.seek(0)
    return buf.read()

def export_all_groups_sorted_smallest_first(
    groups_display,   # [(display_name, count, canon_set)]
    export_one_fn,    # export_one(display_name, canon_set) -> bytes
):
    """
    - count szerint n√∂vekv≈ëre rendezve kezdi az exportot
    - Minden csoport k√ºl√∂n CSV-be ker√ºl (export_{slug}.csv)
    - Folytonosan checkpointol; megszakad√°s ut√°n onnan folytathat√≥
    - A v√©g√©n egy ZIP-et k√©sz√≠t a mapp√°ban √∂sszegy≈±lt CSV-kb≈ël
    Visszat√©r: (zip_bytes_or_None, run_dir)
    """
    ordered = sorted(groups_display, key=lambda t: (t[1], t[0]))
    total = len(ordered)

    cp = _load_checkpoint()
    now_id = datetime.now().strftime("%Y%m%d_%H%M%S")
    if not cp:
        run_id = now_id
        run_dir = os.path.join(EXPORTS_ROOT, f"run_{run_id}")
        _ensure_dir(run_dir)
        cp = {
            "run_id": run_id,
            "run_dir": run_dir,
            "completed": [],
            "pending": [d for d, _, _ in ordered],
        }
        _save_checkpoint(cp)
    else:
        run_dir = cp.get("run_dir") or os.path.join(EXPORTS_ROOT, f"run_{now_id}")
        _ensure_dir(run_dir)
        cp["run_dir"] = run_dir
        _save_checkpoint(cp)

    success, failed = 0, 0
    completed_set = set(cp.get("completed", []))
    pending_names = [n for n in cp.get("pending", []) if n not in completed_set]
    num_done_initial = len(completed_set)

    with st.status("Export√°l√°s folyamatban‚Ä¶", expanded=True) as status:
        prog = st.progress(0.0)
        for idx, (display_name, count, canon) in enumerate(ordered, start=1):
            if display_name in completed_set:
                prog.progress(min(1.0, (num_done_initial + success) / max(1,total)))
                st.write(f"‚úÖ M√°r k√©sz: **{display_name}** ({count} db)")
                continue
            if display_name not in pending_names:
                st.write(f"‚è≠ Kihagyva: **{display_name}** ({count} db)")
                continue

            st.write(f"‚Üí Export√°l√°s: **{display_name}** ({count} db)")
            try:
                data = export_one_fn(display_name, canon)
                _write_csv_file(run_dir, display_name, data)

                completed_set.add(display_name)
                success += 1
                cp["completed"] = sorted(list(completed_set))
                cp["pending"] = [n for n in cp["pending"] if n != display_name]
                _save_checkpoint(cp)

                prog.progress(min(1.0, (num_done_initial + success) / max(1,total)))
                st.write(f"‚úÖ K√©sz: **{display_name}**")
            except Exception as e:
                failed += 1
                st.write(f"‚ùå Hiba: **{display_name}** ‚Äî {e!r}")
                st.info("A folyamat folytathat√≥ a ‚ÄûFolytat√°s megszakadt exportb√≥l‚Äù gombbal.")
                # hagyjuk a pendingben

        if failed == 0 and len(completed_set) == total:
            zip_bytes = _zip_folder(run_dir)
            _clear_checkpoint()
            status.update(label="Export k√©sz", state="complete")
            return zip_bytes, run_dir
        else:
            status.update(label="Export r√©szben k√©sz ‚Äì folytathat√≥", state="running")
            return None, run_dir



st.markdown("""---""")
st.subheader("√ñsszes let√∂lt√©se (ZIP) ‚Äì legkisebb csoportt√≥l kezdve")


# A display_list a build_display_list() eredm√©nye fent
try_resume = _load_checkpoint() is not None
col1, col2 = st.columns([1,1])
with col1:
    run_all = st.button("Export√°l√°s ‚Äì √ñsszes (kicsikt≈ël nagyig)", type="primary", use_container_width=True)
with col2:
    resume = st.button("Folytat√°s megszakadt exportb√≥l", disabled=not try_resume, use_container_width=True)

if run_all:
    zip_bytes, run_dir = export_all_groups_sorted_smallest_first(
        groups_display=items,
        export_one_fn=export_one,
    )
    if zip_bytes:
        st.success("Sikeres export! Let√∂lthet≈ë a ZIP:")
        st.download_button(
            label="ZIP let√∂lt√©se",
            data=zip_bytes,
            file_name="notion_kurzus_export_all.zip",
            mime="application/zip",
            use_container_width=True
        )
        st.caption(f"Fut√°s mappa: `{run_dir}` ‚Äì A CSV-k k√ºl√∂n f√°jlokban vannak, a ZIP ezeket tartalmazza.")
    else:
        st.warning("Az export nem k√©sz√ºlt el teljes eg√©sz√©ben. A ‚ÄûFolytat√°s megszakadt exportb√≥l‚Äù gombbal onnan folytathatod, ahol abbahagyta.")

if resume:
    zip_bytes, run_dir = export_all_groups_sorted_smallest_first(
        groups_display=items,
        export_one_fn=export_one,
    )
    if zip_bytes:
        st.success("Sikeres export! Let√∂lthet≈ë a ZIP:")
        st.download_button(
            label="ZIP let√∂lt√©se",
            data=zip_bytes,
            file_name="notion_kurzus_export_all.zip",
            mime="application/zip",
            use_container_width=True
        )
        st.caption(f"Fut√°s mappa: `{run_dir}`")
    else:
        st.info("M√©g vannak h√°tral√©v≈ë csoportok vagy hiba t√∂rt√©nt k√∂zben. √öjra megpr√≥b√°lhatod a folytat√°st.")

